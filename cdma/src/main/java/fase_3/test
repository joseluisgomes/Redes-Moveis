private List<Float> shiftSpreadingCode(int numberOfShifts,
                                           int expandedSpreadingCodeSize,
                                           List<Float> expandedSpreadingCode) {
    /*    final var limit = expandedSpreadingCodeSize * numberOfShifts;
        final var shiftedSpreadingCodes = new ArrayList<List<Float>>();

        var shiftedSpreadingCode = new ArrayList<Float>();
        int j = 0, k = 0;

        shiftedSpreadingCodes.add(expandedSpreadingCode);

        for (int i = 0; i < limit; i++) {
            if ((i + 1) % shiftedSpreadingCodes.get(k).size() == 0) {
                shiftedSpreadingCode.add(j, shiftedSpreadingCodes.get(k).get(0));
                shiftedSpreadingCodes.add(shiftedSpreadingCode);
                shiftedSpreadingCode = new ArrayList<>(); // Update the object reference
                k++; j = 0;
            }
            else
                shiftedSpreadingCode.add(j, shiftedSpreadingCodes.get(k).get(j + 1));
            j++;
        }
        return shiftedSpreadingCodes.get(k); */
 /*       final List<Float> expandedSpreadingCodeShifted = Collections.rotate(expandedSpreadingCode, numberOfShifts);
        return expandedSpreadingCodeShifted; */
    }




